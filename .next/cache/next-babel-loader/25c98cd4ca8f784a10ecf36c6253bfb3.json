{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar BarChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BarChart, _Component);\n\n  function BarChart(props) {\n    var _this;\n\n    _classCallCheck(this, BarChart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BarChart).call(this, props));\n    _this.state = {\n      data: _this.props.data\n    };\n    return _this;\n  }\n\n  _createClass(BarChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {//const data = [ 2, 4, 2, 6, 8 ]\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps, oldState) {\n      if (this.props.data !== oldState.data) {\n        //   console.log(this.props.data);\n        this.setState({\n          data: this.props.data\n        });\n        d3.selectAll(this.refs.canvas).select(\"svg\").remove(); //this.drawBarChart();\n      }\n    } // type(d) {\n    //     d[\"Index\"]=+d[\"Index\"]\n    //     d[\"DAUID\"]=d[\"DAUID\"]\n    //     return d\n    // }\n\n  }, {\n    key: \"drawBarChart\",\n    value: function drawBarChart() {\n      // const canvasHeight = 400\n      // const canvasWidth = 600\n      // const scale = 20\n      // const svgCanvas = d3.select(this.refs.canvas)\n      //     .append(\"svg\")\n      //     .attr(\"width\", canvasWidth)\n      //     .attr(\"height\", canvasHeight)\n      //     .style(\"border\", \"1px solid black\")\n      // svgCanvas.selectAll(\"rect\")\n      //     .data(data).enter()\n      //         .append(\"rect\")\n      //         .attr(\"width\", 40)\n      //         .attr(\"height\", (datapoint) => datapoint * scale)\n      //         .attr(\"fill\", \"orange\")\n      //         .attr(\"x\", (datapoint, iteration) => iteration * 45)\n      //         .attr(\"y\", (datapoint) => canvasHeight - datapoint * scale)\n      // svgCanvas.selectAll(\"text\")\n      // .data(data).enter()\n      //     .append(\"text\")\n      //     .attr(\"x\", (dataPoint, i) => i * 45 + 10)\n      //     .attr(\"y\", (dataPoint, i) => canvasHeight - dataPoint * scale - 10)\n      //     .text(dataPoint => dataPoint)\n      //d3.selectAll(this.refs.canvas).select(\"svg\").remove();\n      // var tooltip2 = d3.select(\"body\")\n      // .append(\"div\")\n      // .attr(\"class\", \"tooltip2\")\n      // .html('test')\n      // .style(\"opacity\",1);\n      //sort bars based on value\n      var data = this.state.data.sort(function (a, b) {\n        return d3.ascending(a.Index, b.Index);\n      });\n      this.setState({\n        data: data\n      }); //set up svg using margin conventions - we'll need plenty of room on the left for labels\n\n      var margin = {\n        top: 15,\n        right: 25,\n        bottom: 15,\n        left: 60\n      };\n      var width = 500 - margin.left - margin.right,\n          height = 400 - margin.top - margin.bottom;\n      var svg = d3.select(this.refs.canvas).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      var y = d3.scaleLinear().range([height, 0]).domain([d3.min(this.state.data, function (d) {\n        return +d.Index;\n      }), d3.max(this.state.data, function (d) {\n        return +d.Index;\n      })]);\n      var x = d3.scaleBand().range([0, width]).domain(this.state.data.map(function (d) {\n        return d.DAUID;\n      })); //make y axis to show bar names\n      // var yAxis = d3.svg.axis()\n      //     .scale(y)\n      //     //no tick marks\n      //     .tickSize(0)\n      //     .orient(\"left\");\n      //    // var gy = svg.append(\"g\")\n      //    //     .attr(\"class\", \"y axis\")\n      //    //     .call(yAxis)\n\n      var bars = svg.selectAll(\".bar\").data(this.state.data).enter().append(\"g\"); //append rects\n\n      bars.append(\"rect\").attr(\"class\", \"bar\").style(\"fill\", function (d) {\n        return '#dd1c77';\n      }).attr(\"y\", function (d) {\n        return y(d.Index);\n      }).attr(\"height\", function (d) {\n        return height - y(d.Index);\n      }).attr(\"x\", function (d) {\n        return x(d.DAUID);\n      }).attr(\"width\", x.bandwidth()); //  .on(\"mouseover\", function(d) {\n      //            tooltip2.transition()\n      //                .duration(0)\n      //                .style(\"opacity\", .9);\n      //                tooltip2.html(\"<p>\" + d.DAUID +\"</p>\")\n      //                .style(\"left\", (d3.event.pageX) + \"px\")\n      //                .style(\"top\", (d3.event.pageY - 28) + \"px\").style(\"visibility\", \"visible\");\n      //                geoLayer2.eachLayer(function (layer) {\n      //                  if(layer.feature.properties[\"DAUID\"] == d.DAUID) {\n      //                    layer.setStyle({opacity:1,fillOpacity:0.6,weight:6});\n      //                  }\n      //                });\n      //            })\n      //    .on(\"mouseleave\", function(d) {\n      //        tooltip2.transition()\n      //            .duration(500)\n      //            .style(\"opacity\", 0);\n      //            geoLayer2.eachLayer(function (layer) {\n      //              layer.setStyle({opacity:1,fillOpacity:0.3,weight:1})\n      //            });\n      //    });\n\n      bars.append(\"text\").attr(\"text-anchor\", \"middle\") // this makes it easy to centre the text as the transform is applied to the anchor\n      .attr(\"transform\", \"translate(\" + 0 + \",\" + height / 2 + \")rotate(-90)\") // text is drawn off the screen top left, move down and out and rotate\n      .text(\"DAUID\");\n      bars.append(\"text\").attr(\"text-anchor\", \"middle\") // this makes it easy to centre the text as the transform is applied to the anchor\n      .attr(\"transform\", \"translate(\" + width / 2 + \",\" + (height + 14) + \")\") // centre below axis\n      .text(\"Rank\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        ref: \"canvas\"\n      });\n    }\n  }]);\n\n  return BarChart;\n}(Component);\n\nexport default BarChart;","map":null,"metadata":{},"sourceType":"module"}