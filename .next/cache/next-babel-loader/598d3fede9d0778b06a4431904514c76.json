{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport '@shopify/polaris/styles.css';\nimport { AppProvider, Card, Layout, Button, Stack, Scrollable, TextStyle, Page } from '@shopify/polaris';\nimport Maps from './Maps.js';\nimport App from './App.js';\nimport Loader from './Loader.js'; // import 'leaflet/dist/leaflet.css';\n\nimport Interpreter from './Interpreter.js';\nimport { ArrowUpMinor } from '@shopify/polaris-icons';\nimport axios from 'axios';\nimport Setting from './Setting.js';\nimport Plot from 'react-plotly.js';\nimport MethodSetting from './MethodSetting.js';\nimport Ranger from './Ranger.js';\n\nclass DashBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"storeDisplay\", (disval, dbval, cat) => {\n      if (this.state.stat === \"generate\") {\n        const dbdata2 = this.state.dbdata;\n        const flag = dbdata2.some(val => val === dbval); //console.log(flag);\n\n        if (!flag) {\n          const dbdata = this.state.dbdata;\n          dbdata.push(dbval);\n          const source = this.state.source;\n          source.push(ArrowUpMinor);\n          const display = this.state.display;\n          display.push(disval);\n          const category2 = this.state.category;\n          category2.push(cat);\n          const src = this.state.src;\n          src.push(1);\n          const range = this.state.range;\n          range.push(0);\n          this.setState({\n            display: display,\n            dbdata: dbdata,\n            source: source,\n            src: src,\n            category: category2,\n            range: range\n          });\n        }\n      } else {\n        const idbdata = this.state.idbdata;\n        const flag2 = idbdata.some(val => val === dbval);\n\n        if (!flag2) {\n          const idbdata = this.state.idbdata;\n          idbdata.push(dbval);\n          const idisplay = this.state.idisplay;\n          idisplay.push(disval);\n          const icategory = this.state.icategory;\n          icategory.push(cat);\n          this.setState({\n            idbdata: idbdata,\n            idisplay: idisplay,\n            icategory: icategory\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"clearArray\", () => {\n      const display = [];\n      const dbdata = [];\n      const source = [];\n      const category = [];\n      const src = [];\n      const range = [];\n      const gresult = {};\n      const gdata = [];\n      this.setState({\n        display: display,\n        dbdata: dbdata,\n        source: source,\n        category: category,\n        src: src,\n        range: range,\n        gresult: gresult,\n        gdata: gdata\n      });\n    });\n\n    _defineProperty(this, \"clearArray2\", () => {\n      const idbdata = [];\n      const idisplay = [];\n      const icategory = [];\n      this.setState({\n        idbdata: idbdata,\n        idisplay: idisplay,\n        icategory: icategory\n      });\n    });\n\n    _defineProperty(this, \"generateArray\", () => {\n      var res = {};\n\n      for (var i = 0; i < this.state.dbdata.length; i++) {\n        res[this.state.dbdata[i]] = this.state.range[i] * this.state.src[i];\n      } // console.log(res);\n\n\n      var cat = \"index\";\n\n      if (this.state.category[0] == \"crime\") {\n        res['d1'] = this.state.datequery + '/01/01';\n        res['d2'] = this.state.datequery + '/12/31';\n      }\n\n      if (this.state.category[0] === \"incident\") {\n        cat = \"incident\";\n      }\n\n      if (this.state.category[0] === \"demographics\") {\n        cat = \"dindex\";\n      }\n\n      this.setState({\n        ajaxLoading: true,\n        ajaxLoading2: true\n      });\n\n      if (this.state.method === 'lc') {\n        axios.get('http://localhost:5000/rest/' + cat + '/', {\n          params: res\n        }).then(result => {\n          //console.log(result.data['resu2']);\n          var res = result.data['sums'].sort((a, b) => {\n            return a.Index - b.Index;\n          });\n          var indexWeight = {};\n          res.map(r => {\n            indexWeight[r.DAUID] = 1;\n          });\n          var sx = res.map(r => r.DAUID);\n          console.log(indexWeight, sx);\n          this.setState({\n            ajaxLoading: false,\n            ajaxLoading2: false,\n            gresult: result.data['resu2'],\n            gdata: result.data['sums'],\n            indexWeight: indexWeight,\n            chartX: res.map(a => a.DAUID),\n            chartY: res.map(b => b.Index)\n          });\n        });\n      } else {\n        console.log(\"in crimepca method\");\n        axios.get('http://localhost:5000/rest/crimepca/', {\n          params: res\n        }).then(result => {\n          //console.log(result.data['resu2']);\n          var res = result.data['sums'].sort((a, b) => {\n            return a.Index - b.Index;\n          });\n          var indexWeight = {};\n          res.map(r => {\n            indexWeight[r.DAUID] = 1;\n          });\n          var sx = res.map(r => r.DAUID);\n          console.log(indexWeight, sx);\n          this.setState({\n            ajaxLoading: false,\n            ajaxLoading2: false,\n            gresult: result.data['resu2'],\n            gdata: result.data['sums'],\n            indexWeight: indexWeight,\n            chartX: res.map(a => a.DAUID),\n            chartY: res.map(b => b.Index)\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"interpretArray\", () => {\n      var result = {};\n\n      for (var j = 0; j < this.state.idbdata.length; j++) {\n        result[this.state.idbdata[j]] = 1;\n      }\n\n      var cat1 = \"interpreter3\";\n\n      if (this.state.icategory[0] === \"incident\") {\n        cat1 = \"interpreter2\";\n      }\n\n      if (this.state.icategory[0] === \"demographics\") {\n        cat1 = \"interpreter1\";\n      }\n\n      this.setState({\n        ajaxLoading: true\n      });\n      axios.get('http://localhost:5000/rest/' + cat1 + '/', {\n        params: result\n      }).then(result => {\n        var res = result.data['sums'].sort((a, b) => {\n          return a.Index - b.Index;\n        });\n        this.setState({\n          ajaxLoading: false,\n          iresult: result.data['pred'],\n          idata: result.data['sums'],\n          chartX: res.map(a => a.DAUID),\n          chartY: res.map(b => b.Index)\n        });\n      });\n    });\n\n    _defineProperty(this, \"mutateSource\", src => {\n      this.setState({\n        source: src\n      });\n    });\n\n    _defineProperty(this, \"mutateRange\", range => {\n      this.setState({\n        range: range\n      });\n    });\n\n    _defineProperty(this, \"setStat\", value => {\n      const stat = value;\n      this.setState({\n        stat: stat\n      });\n    });\n\n    _defineProperty(this, \"methodStat\", value => {\n      console.log(value, this.state.stat);\n\n      if (value === \"PCA\") {\n        this.setState({\n          method: 'pca'\n        });\n      } else {\n        this.setState({\n          method: 'lc'\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleHover\", data => {\n      console.log(data.points[0].value);\n      console.log(data.points[0].x);\n      console.log(this.state.chartX[data.points[0].x]);\n      var cdauid = this.state.chartX[data.points[0].x];\n      var indexWeight = this.state.indexWeight;\n\n      for (var key in indexWeight) {\n        indexWeight[key] = 1;\n\n        if (key == cdauid) {\n          indexWeight[key] = 6;\n        }\n      }\n\n      this.setState({\n        indexWeight: indexWeight\n      });\n      console.log(this.state.indexWeight[cdauid]);\n    });\n\n    _defineProperty(this, \"handleDateChange\", value => {\n      this.setState({\n        datequery: value\n      });\n      var res2 = {};\n      res2['d1'] = this.state.datequery + '/01/01';\n      res2['d2'] = this.state.datequery + '/12/31';\n      console.log(res2);\n    });\n\n    this.state = {\n      idisplay: [],\n      idbdata: [],\n      icategory: [],\n      display: [],\n      dbdata: [],\n      source: [],\n      category: [],\n      src: [],\n      range: [],\n      gendic: [],\n      gresult: {},\n      iresult: {},\n      gdata: [],\n      idata: [],\n      stat: \"generate\",\n      chartX: [],\n      chartY: [],\n      ajaxLoading: false,\n      ajaxLoading2: true,\n      indexWeight: {},\n      method: 'lc',\n      datequery: 2005\n    };\n  }\n\n  componentDidMount() {} // handleClick(a,b){\n  //    console.log(a,b);\n  // }\n\n\n  render() {\n    return __jsx(AppProvider, null, __jsx(Page, {\n      fullWidth: true,\n      separator: true\n    }, __jsx(Layout, null, __jsx(Layout.Section, {\n      secondary: true\n    }, __jsx(Card, {\n      title: \"Indicators\",\n      actions: [{\n        content: 'Manage'\n      }]\n    }, __jsx(Card.Section, null, __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, \"Choose Indicators\"), __jsx(Setting, {\n      onClick: value => this.setStat(value)\n    }), __jsx(MethodSetting, {\n      onClick: methodvalue => this.methodStat(methodvalue)\n    }), __jsx(TextStyle, {\n      variation: \"subdued\"\n    }, \"Date Period for Indicators\"), __jsx(Ranger, {\n      min: 2005,\n      max: 2017,\n      onChange: value => this.handleDateChange(value)\n    })), __jsx(Card.Section, {\n      title: \"Items\"\n    }, __jsx(Scrollable, {\n      shadow: true,\n      style: {\n        height: '40vh'\n      }\n    }, __jsx(App, {\n      onValueChange: (disval, dbval, cat) => this.storeDisplay(disval, dbval, cat)\n    }))))), __jsx(Layout.Section, {\n      primary: true\n    }, __jsx(Maps, {\n      genres: this.state.gresult,\n      gendata: this.state.gdata,\n      ajaxload: this.state.ajaxLoading,\n      intres: this.state.iresult,\n      intdata: this.state.idata,\n      iweight: this.state.indexWeight\n    })), __jsx(Layout.Section, null, __jsx(Stack, null, __jsx(Card, {\n      title: \"Selector\"\n    }, __jsx(Card.Section, null, __jsx(Stack, {\n      spacing: \"loose\"\n    }, __jsx(Button, {\n      primary: true,\n      onClick: this.generateArray\n    }, \"Generate\"), __jsx(Button, {\n      primary: true,\n      onClick: this.clearArray\n    }, \"Clear\"))), __jsx(Card.Section, null, __jsx(Scrollable, {\n      shadow: true,\n      style: {\n        height: '20vh',\n        width: '45vh'\n      }\n    }, __jsx(Loader, {\n      data: this.state.display,\n      src: this.state.source,\n      cat: this.state.category,\n      source: this.state.src,\n      range: this.state.range,\n      onSourceChange: src => this.mutateSource(src),\n      onRangeChange: range => this.mutateRange(range)\n    })))), __jsx(Card, {\n      title: \"Interpreters\"\n    }, __jsx(Card.Section, null, __jsx(Stack, {\n      spacing: \"loose\"\n    }, __jsx(Button, {\n      primary: true,\n      onClick: this.interpretArray\n    }, \"Interpret\"), __jsx(Button, {\n      primary: true,\n      onClick: this.clearArray2\n    }, \"clear\"))), __jsx(Card.Section, null, __jsx(Scrollable, {\n      shadow: true,\n      style: {\n        height: '20vh',\n        width: '45vh'\n      }\n    }, __jsx(Interpreter, {\n      data: this.state.idisplay,\n      cat: this.state.icategory\n    })))), __jsx(Card, {\n      title: \"Chart\"\n    }, __jsx(Scrollable, {\n      shadow: true,\n      style: {\n        height: '32vh',\n        width: '59vh'\n      }\n    }, !this.state.ajaxLoading2 ? __jsx(Plot, {\n      data: [{\n        type: 'bar',\n        // x: this.state.chartX,\n        y: this.state.chartY,\n        marker: {\n          color: '#C8A2C8',\n          line: {\n            width: 2.5\n          }\n        }\n      }],\n      layout: {\n        width: '30vh',\n        height: '50vh',\n        title: this.state.ititle\n      },\n      onHover: data => this.handleHover(data)\n    }) : __jsx(\"p\", null, \"Waiting for the load\"))))))));\n  }\n\n}\n\nexport default DashBoard;","map":null,"metadata":{},"sourceType":"module"}