{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Map, TileLayer, LayersControl, GeoJSON } from \"react-leaflet\";\nimport { Spinner } from '@shopify/polaris'; // import \"leaflet/dist/leaflet.css\";\n\nimport diss from '../data/Dissemination.json';\nimport '@shopify/polaris/styles.css';\nimport L from 'leaflet';\nL.Icon.Default.imagePath = '.'; // OR\n\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n  iconUrl: require('leaflet/dist/images/marker-icon.png'),\n  shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nvar MapsComp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MapsComp, _React$Component);\n\n  function MapsComp(props) {\n    var _this;\n\n    _classCallCheck(this, MapsComp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapsComp).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getColor\", function (val) {\n      return val >= -1 && val < -0.75 ? '#a50026' : val >= -0.75 && val < -0.6 ? '#d73027' : val >= -0.6 && val < -0.4 ? '#f46d43' : val >= -0.4 && val < -0.2 ? '#fdae61' : val >= -0.2 && val < 0 ? '#fee08b' : val >= 0.01 && val < 0.1 ? '#d9ef8b' : val >= 0.1 && val < 0.3 ? '#a6d96a' : val >= 0.3 && val < 0.5 ? '#66bd63' : val >= 0.5 && val < 0.75 ? '#1a9850' : val >= 0.75 && val <= 1 ? '#006837' : val >= 0 && val < 0.01 ? '#ffffff' : '#000000';\n    });\n\n    _this.state = {\n      data: [],\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(MapsComp, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps, oldState) {\n      if (this.props.data !== oldState.data || this.props.loading !== oldState.loading) {\n        console.log(this.props.data);\n        this.setState({\n          data: this.props.data,\n          loading: this.props.loading\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var style = function style(feature) {\n        var checkDauId = feature.properties.DAUID;\n\n        if (_Object$keys(_this2.state.data).length > 0) {\n          return {\n            fillColor: _this2.getColor(_this2.state.data[checkDauId]),\n            color: _this2.getColor(_this2.state.data[checkDauId]),\n            opacity: 1,\n            fillOpacity: 0.3,\n            weight: 0.5\n          };\n        }\n      };\n\n      return __jsx(React.Fragment, null, this.state.loading === false ? __jsx(Map, {\n        center: [44.755113, -63.320488],\n        zoom: 9,\n        style: {\n          height: \"90vh\"\n        }\n      }, __jsx(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n      }), __jsx(LayersControl, {\n        position: \"topright\"\n      }, __jsx(LayersControl.BaseLayer, {\n        name: \"Indcmp\",\n        checked: \"true\"\n      }, __jsx(GeoJSON // key={this.state.gkey}\n      , {\n        ref: \"geojson\",\n        data: diss,\n        style: style\n      })))) : __jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\",\n        color: \"teal\"\n      }));\n    }\n  }]);\n\n  return MapsComp;\n}(React.Component);\n\nexport default MapsComp;","map":null,"metadata":{},"sourceType":"module"}