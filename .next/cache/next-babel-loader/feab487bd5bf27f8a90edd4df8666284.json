{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"overClick\", e => {\n      e.target.style = \"cursor:pointer;text-decoration:underline;\";\n    });\n\n    _defineProperty(this, \"handleClicker\", e => {\n      var disval = e.target.textContent;\n      var dbval = e.target.parentElement.getAttribute(\"title\");\n      var category = e.target.getAttribute(\"title\");\n      this.props.onValueChange(disval, dbval, category);\n    });\n\n    _defineProperty(this, \"handleClicker2\", e => {\n      var disval = e.target.textContent;\n      var dbval = e.target.parentElement.getAttribute(\"title\");\n      var category = e.target.getAttribute(\"title\");\n      this.props.onValueChange(disval, dbval, category);\n    });\n\n    _defineProperty(this, \"handleClick\", e => {\n      e.target.parentElement.querySelector(\".nested\").classList.toggle(\"active\");\n      e.target.classList.toggle(\"caret-down\"); //this.props.onClick(e.target.parentElement.getAttribute(\"title\"));\n    });\n\n    _defineProperty(this, \"handleClick2\", e => {\n      e.target.parentElement.querySelector(\".nested\").classList.toggle(\"active\");\n      e.target.classList.toggle(\"caret-down\");\n    });\n\n    _defineProperty(this, \"outClick\", e => {\n      e.target.style = \"text-decoration:none\";\n    });\n\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:5000/rest/\").then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result\n      });\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    var ligen = (item, txt) => {\n      return Object.keys(item).map(element => {\n        return element === \"none\" ? item[\"none\"].map(el => __jsx(\"li\", {\n          key: el,\n          title: txt.concat('|', el)\n        }, __jsx(\"span\", {\n          class: \"caret\",\n          title: \"demographics\",\n          onClick: this.handleClicker,\n          onMouseOver: this.overClick,\n          onMouseOut: this.outClick\n        }, el))) : __jsx(\"li\", {\n          key: element,\n          title: txt !== '' ? txt.concat('|', element) : element\n        }, __jsx(\"span\", {\n          class: \"caret\",\n          onClick: this.handleClick,\n          onMouseOver: this.overClick,\n          onMouseOut: this.outClick\n        }, element), __jsx(\"ul\", {\n          class: \"nested\"\n        }, ligen(item[element], txt !== '' ? txt.concat('|', element) : element)));\n      });\n    };\n\n    var ligen2 = (item, cat) => {\n      return Object.keys(item).map(element => {\n        return element === \"none\" ? item[element].map(el => __jsx(\"li\", {\n          key: el,\n          title: el\n        }, __jsx(\"span\", {\n          class: \"caret\",\n          title: cat,\n          onClick: this.handleClicker2,\n          onMouseOver: this.overClick,\n          onMouseOut: this.outClick\n        }, el))) : __jsx(\"li\", {\n          key: element\n        }, __jsx(\"span\", {\n          class: \"caret\",\n          onClick: this.handleClick,\n          onMouseOver: this.overClick,\n          onMouseOut: this.outClick\n        }, element), __jsx(\"ul\", {\n          class: \"nested\"\n        }, Array.isArray(item[element]) ? item[element].filter(el => el !== \" \").map(el => __jsx(\"li\", {\n          key: el,\n          title: el\n        }, __jsx(\"span\", {\n          class: \"caret\",\n          title: cat,\n          onClick: this.handleClicker2,\n          onMouseOver: this.overClick,\n          onMouseOut: this.outClick\n        }, el))) : ligen2(item[element], cat)));\n      });\n    };\n\n    const {\n      error,\n      isLoaded,\n      items\n    } = this.state;\n\n    if (error) {\n      return __jsx(\"div\", null, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return __jsx(\"div\", null, \"Loading...\");\n    } else {\n      var list1 = ligen(items['dem'], '');\n      var list2 = ligen2(items['inc'], 'incident');\n      var list3 = ligen2(items['ret'], 'crime');\n      return __jsx(\"div\", null, __jsx(\"ul\", null, __jsx(\"li\", {\n        title: \"demo\"\n      }, __jsx(\"span\", {\n        class: \"caret\",\n        onClick: this.handleClick,\n        onMouseOver: this.overClick,\n        onMouseOut: this.outClick\n      }, \"Demographics\"), __jsx(\"ul\", {\n        class: \"nested\"\n      }, list1)), list2, __jsx(\"li\", null, __jsx(\"span\", {\n        class: \"caret\",\n        onClick: this.handleClick2,\n        onMouseOver: this.overClick,\n        onMouseOut: this.outClick\n      }, \" Crime\"), __jsx(\"ul\", {\n        class: \"nested\"\n      }, list3))));\n    }\n  }\n\n}\n\nexport default App;","map":null,"metadata":{},"sourceType":"module"}