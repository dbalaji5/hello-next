{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/balaji/hello-next/components/MapsComp.js\";\nvar __jsx = React.createElement;\nimport React from 'react'; //import { Map, TileLayer,LayersControl,GeoJSON } from \"react-leaflet-universal\";\n\nimport { Spinner } from '@shopify/polaris';\nimport \"leaflet/dist/leaflet.css\";\nimport diss from '../data/Dissemination.json';\nimport '@shopify/polaris/styles.css';\nvar RL = false;\nvar Map = false;\nvar TileLayer = false;\nvar LayersControl = false;\nvar GeoJSON = false;\n\nif (process.env.BROWSER) {\n  RL = require('react-leaflet');\n  Map = RL.Map;\n  TileLayer = RL.TileLayer;\n  LayersControl = RL.LayersControl;\n  GeoJSON = RL.GeoJSON;\n} // L.Icon.Default.imagePath = '.';\n// // OR\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//   iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//   shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n\n\nvar MapsComp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MapsComp, _React$Component);\n\n  function MapsComp(props) {\n    var _this;\n\n    _classCallCheck(this, MapsComp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapsComp).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getColor\", function (val) {\n      return val >= -1 && val < -0.75 ? '#a50026' : val >= -0.75 && val < -0.6 ? '#d73027' : val >= -0.6 && val < -0.4 ? '#f46d43' : val >= -0.4 && val < -0.2 ? '#fdae61' : val >= -0.2 && val < 0 ? '#fee08b' : val >= 0.01 && val < 0.1 ? '#d9ef8b' : val >= 0.1 && val < 0.3 ? '#a6d96a' : val >= 0.3 && val < 0.5 ? '#66bd63' : val >= 0.5 && val < 0.75 ? '#1a9850' : val >= 0.75 && val <= 1 ? '#006837' : val >= 0 && val < 0.01 ? '#ffffff' : '#000000';\n    });\n\n    _this.state = {\n      data: [],\n      loading: false\n    };\n    return _this;\n  }\n\n  _createClass(MapsComp, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps, oldState) {\n      if (this.props.data !== oldState.data || this.props.loading !== oldState.loading) {\n        console.log(this.props.data);\n        this.setState({\n          data: this.props.data,\n          loading: this.props.loading\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var style = function style(feature) {\n        var checkDauId = feature.properties.DAUID;\n\n        if (_Object$keys(_this2.state.data).length > 0) {\n          return {\n            fillColor: _this2.getColor(_this2.state.data[checkDauId]),\n            color: _this2.getColor(_this2.state.data[checkDauId]),\n            opacity: 1,\n            fillOpacity: 0.3,\n            weight: 0.5\n          };\n        }\n      };\n\n      return __jsx(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, this.state.loading === false ? __jsx(Map, {\n        center: [44.755113, -63.320488],\n        zoom: 9,\n        style: {\n          height: \"90vh\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, __jsx(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), __jsx(LayersControl, {\n        position: \"topright\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, __jsx(LayersControl.BaseLayer, {\n        name: \"Indcmp\",\n        checked: \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, __jsx(GeoJSON // key={this.state.gkey}\n      , {\n        ref: \"geojson\",\n        data: diss,\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })))) : __jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\",\n        color: \"teal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return MapsComp;\n}(React.Component);\n\nexport default MapsComp;","map":{"version":3,"sources":["/home/balaji/hello-next/components/MapsComp.js"],"names":["React","Spinner","diss","RL","Map","TileLayer","LayersControl","GeoJSON","process","env","BROWSER","require","MapsComp","props","val","state","data","loading","oldProps","oldState","console","log","setState","style","feature","checkDauId","properties","DAUID","length","fillColor","getColor","color","opacity","fillOpacity","weight","height","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n//import { Map, TileLayer,LayersControl,GeoJSON } from \"react-leaflet-universal\";\nimport {Spinner} from '@shopify/polaris';\nimport \"leaflet/dist/leaflet.css\";\nimport diss from '../data/Dissemination.json';\nimport '@shopify/polaris/styles.css';\n\n\nlet RL = false;\nlet Map = false;\nlet TileLayer = false;\nlet LayersControl=false;\nlet GeoJSON=false;\nif (process.env.BROWSER) {\n  RL = require('react-leaflet');\n  Map = RL.Map;\n  TileLayer = RL.TileLayer;\n  LayersControl=RL.LayersControl;\n  GeoJSON=RL.GeoJSON;\n}\n\n// L.Icon.Default.imagePath = '.';\n// // OR\n// delete L.Icon.Default.prototype._getIconUrl;\n\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//   iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//   shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n\nclass MapsComp extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            data:[],\n            loading:false\n        }\n    }\n    componentDidUpdate(oldProps,oldState){\n    \n        \n        if(this.props.data !== oldState.data || this.props.loading !== oldState.loading){\n          console.log(this.props.data);\n        \n            this.setState({\n                data:this.props.data,\n                loading:this.props.loading\n            });\n          \n        }\n       \n    }\n    getColor = (val) => {\n\n\n        return val>=-1 && val < -0.75? '#a50026':\n                val>=-0.75 && val < -0.6 ? '#d73027':\n                val>=-0.6 && val < -0.4 ? '#f46d43':\n                val>=-0.4 && val < -0.2 ? '#fdae61':\n                val>=-0.2 && val < 0 ? '#fee08b':\n                val>=0.01   &&  val <0.1 ? '#d9ef8b':\n                val>=0.1 && val < 0.3 ? '#a6d96a':\n                val>=0.3 && val < 0.5 ? '#66bd63':\n                val>=0.5 && val < 0.75 ? '#1a9850':\n                val >= 0.75 && val <= 1 ? '#006837':\n                val>=0 && val <0.01 ? '#ffffff':\n                                    '#000000';\n  \n      };\n\n      \n\n    render(){\n\n        var style = (feature) => {\n            var checkDauId=feature.properties.DAUID;\n            if(Object.keys(this.state.data).length>0){\n                return ({\n                    fillColor: this.getColor(this.state.data[checkDauId]),\n                    color:this.getColor(this.state.data[checkDauId]),\n                    opacity:1,\n                    fillOpacity:0.3,\n                    weight:0.5\n                });\n            }\n        }\n\n        return (\n          <React.Fragment>\n          {(this.state.loading===false)?(\n          <Map center={[44.755113, -63.320488]} zoom={9} style={{ height: \"90vh\" }}>\n            <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n         \n          <LayersControl position=\"topright\">\n          \n          <LayersControl.BaseLayer name=\"Indcmp\" checked=\"true\">\n          <GeoJSON \n                // key={this.state.gkey}\n                ref=\"geojson\"\n                data={diss}\n                style={style}\n              />\n          </LayersControl.BaseLayer>\n            \n          </LayersControl>\n          </Map>\n          ):(<Spinner accessibilityLabel=\"Spinner example\" size=\"large\" color=\"teal\" />)}\n          </React.Fragment>\n        );\n    }\n\n}\n\nexport default MapsComp;"]},"metadata":{},"sourceType":"module"}