{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Map, TileLayer, Popup, LayersControl, GeoJSON } from \"react-leaflet-universal\";\nimport \"leaflet/dist/leaflet.css\";\nimport diss from '../data/Dissemination.json';\nimport '@shopify/polaris/styles.css';\nimport { Card, Layout, Spinner } from '@shopify/polaris';\nimport axios from 'axios';\nimport dynamic from 'next/dynamic';\nvar Barplot = dynamic(function () {\n  return import('./BarPlot');\n}, {\n  ssr: false,\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('./BarPlot')];\n    },\n    modules: ['./BarPlot']\n  }\n}); // L.Icon.Default.imagePath = '.';\n// // OR\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//   iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//   shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n\nvar numMapClicks = 0;\nvar geoMapClicks = 0;\nvar geoMapClicks2 = 0;\n\nvar Maps =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Maps, _React$Component);\n\n  function Maps(props) {\n    var _this;\n\n    _classCallCheck(this, Maps);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Maps).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getColor\", function (val) {\n      return val >= -1 && val < -0.75 ? '#a50026' : val >= -0.75 && val < -0.6 ? '#d73027' : val >= -0.6 && val < -0.4 ? '#f46d43' : val >= -0.4 && val < -0.2 ? '#fdae61' : val >= -0.2 && val < 0 ? '#fee08b' : val >= 0.01 && val < 0.1 ? '#d9ef8b' : val >= 0.1 && val < 0.3 ? '#a6d96a' : val >= 0.3 && val < 0.5 ? '#66bd63' : val >= 0.5 && val < 0.75 ? '#1a9850' : val >= 0.75 && val <= 1 ? '#006837' : val >= 0 && val < 0.01 ? '#ffffff' : '#000000';\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEachFeature2\", function (feature, layer) {\n      //layer.setStyle({fillColor : this.state.color2 ,color:this.state.color2,opacity:this.state.opacity,fillOpacity:0.4,weight:0.4})\n      if (_this.state.intdata.length === 0) {\n        _this.setState({\n          iLoading: false\n        });\n      } else {\n        _this.setState({\n          iLoading: true\n        });\n      }\n\n      layer.on('click', function (e) {\n        if (_this.state.iLoading) {\n          var data = {};\n          data['DAUID'] = feature.properties.DAUID;\n\n          _this.setState({\n            cmpload: true\n          });\n\n          axios.get('http://localhost:5000/rest/explainer/', {\n            params: data\n          }).then(function (result) {\n            var rX = [];\n            var rY = [];\n            var rdata = result.data['exp'];\n\n            for (var i = 0; i < rdata.length; i++) {\n              rY.push(rdata[i][1]);\n              rX.push(rdata[i][0]);\n            }\n\n            _this.setState({\n              intX: rX,\n              //support@refer.telus.com dexter hugo \n              intY: rY,\n              cmpload: true\n            });\n          });\n        }\n\n        _this.setState({\n          ipopup: true,\n          iposition: e.latlng,\n          key: numMapClicks++,\n          ititle: feature.properties.DAUID\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEachFeature\", function (feature, layer) {\n      var checkDauId = feature.properties.DAUID;\n      layer.on('click', function (e) {\n        _this.setState({\n          gpopup: true,\n          position: e.latlng,\n          key: numMapClicks++\n        });\n\n        if (_this.state.gendata.length === 0) {\n          _this.setState({\n            gLoading: false\n          });\n        } else {\n          _this.setState({\n            gLoading: true\n          });\n        }\n\n        if (_this.state.gLoading) {\n          for (var i = 0; i < _this.state.gendata.length; i++) {\n            if (_this.state.gendata[i].DAUID === checkDauId) {\n              var title = 'Index:' + _this.state.gendata[i].Index;\n\n              _this.setState({\n                genX: _this.state.gendata[i].X,\n                genY: _this.state.gendata[i].Y,\n                gtitle: title\n              });\n\n              break;\n            }\n          }\n        }\n      });\n\n      if (_this.state.gendata.length === 0) {\n        _this.setState({\n          gLoading: false\n        });\n      } else {\n        _this.setState({\n          gLoading: true\n        });\n      } // if(this.state.gLoading){\n      //     layer.setStyle({fillColor : this.getColor(this.state.genres[checkDauId]) ,color:this.getColor(this.state.genres[checkDauId]),opacity:1,fillOpacity:0.3,weight:1})\n      // }\n\n    });\n\n    _this.state = {\n      weight: 0.5,\n      opacity: 1,\n      color: '#ffcc99',\n      color2: '#ff66b2',\n      gpopup: false,\n      ipopup: false,\n      position: [],\n      iposition: [],\n      gtitle: '',\n      ititle: '',\n      key: numMapClicks++,\n      gkey: geoMapClicks++,\n      ikey: geoMapClicks2,\n      gLoading: false,\n      iLoading: false,\n      genres: {},\n      intres: {},\n      gendata: [],\n      intdata: [],\n      genX: [],\n      genY: [],\n      intX: [],\n      intY: [],\n      ajaxload: false,\n      cmpload: false,\n      iweight: {}\n    };\n    return _this;\n  }\n\n  _createClass(Maps, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(oldProps, oldState) {\n      if (this.props.genres !== oldState.genres && this.props.gendata !== oldState.gendata || this.props.intres !== oldState.intres && this.props.intdata !== oldState.intdata || this.props.ajaxload !== oldState.ajaxload || this.props.iweight !== oldState.iweight) {\n        this.setState({\n          genres: this.props.genres,\n          gendata: this.props.gendata,\n          gkey: geoMapClicks,\n          ikey: geoMapClicks2,\n          intres: this.props.intres,\n          intdata: this.props.intdata,\n          weight: 1,\n          ajaxload: this.props.ajaxload,\n          iweight: this.props.iweight\n        });\n      } // if(this.props.intres !== oldState.intres && this.props.intdata!==oldState.intdata){\n      //    console.log(this.props.intres);\n      //    this.setState({\n      //      intres:this.props.intres,\n      //      intdata:this.props.intdata\n      //    })\n      // }\n\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var style = function style(feature) {\n        var checkDauId = feature.properties.DAUID;\n\n        if (_this2.state.gendata.length > 0) {\n          return {\n            fillColor: _this2.getColor(_this2.state.genres[checkDauId]),\n            color: _this2.getColor(_this2.state.genres[checkDauId]),\n            opacity: 1,\n            fillOpacity: 0.3,\n            weight: _this2.state.iweight[checkDauId]\n          };\n        } //   else{\n        //   return ({\n        //       weight: this.state.weight,\n        //       opacity: this.state.opacity\n        //     }\n        //   );\n        // }\n\n      };\n\n      var style2 = function style2(feature) {\n        var checkDauId = feature.properties.DAUID;\n\n        if (_this2.state.intdata.length > 0) {\n          return {\n            fillColor: _this2.getColor(_this2.state.intres[checkDauId]),\n            color: _this2.getColor(_this2.state.intres[checkDauId]),\n            opacity: 1,\n            fillOpacity: 0.3,\n            weight: _this2.state.iweight[checkDauId]\n          };\n        }\n      }; // const onEachFeature2 = (feature,layer) => {\n      //     console.log(feature.properties[\"DAUID\"]);\n      //     layer.setStyle({fillColor : this.state.color2 ,color:this.state.color2,opacity:this.state.opacity,fillOpacity:0.4,weight:0.4})\n      //     layer.on('click',(e)=>{\n      //       this.setState({\n      //          ipopup:true,\n      //          iposition:e.latlng,\n      //          key:numMapClicks++,\n      //          ititle:feature.properties.DAUID\n      //       });\n      //   })\n      // }\n\n\n      return __jsx(Layout.Section, {\n        oneHalf: true\n      }, __jsx(Card, {\n        title: \"Visualization\"\n      }, this.state.ajaxload == false ? __jsx(Map, {\n        center: [44.755113, -63.320488],\n        zoom: 9,\n        style: {\n          height: \"60vh\"\n        }\n      }, __jsx(TileLayer, {\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n      }), __jsx(LayersControl, {\n        position: \"topright\"\n      }, __jsx(LayersControl.BaseLayer, {\n        name: \"Index\",\n        checked: \"true\"\n      }, __jsx(GeoJSON // key={this.state.gkey}\n      , {\n        ref: \"geojson2\",\n        data: diss,\n        style: style,\n        onEachFeature: function onEachFeature(feature, layer) {\n          return _this2.onEachFeature(feature, layer);\n        }\n      }), this.state.gpopup && __jsx(Popup, {\n        key: this.state.key,\n        position: this.state.position,\n        onClose: function onClose() {\n          _this2.setState({\n            popup: false\n          });\n        }\n      }, __jsx(\"div\", {\n        style: {\n          width: 320 + 'px',\n          height: 240 + 'px'\n        }\n      }, this.state.gLoading ? __jsx(Barplot, {\n        X: this.state.genX,\n        Y: this.state.Y,\n        title: this.state.title\n      }) : __jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\",\n        color: \"teal\"\n      })))), __jsx(LayersControl.BaseLayer, {\n        name: \"Interpret\"\n      }, __jsx(GeoJSON, {\n        key: this.state.ikey,\n        ref: \"geojson\",\n        data: diss,\n        style: style2,\n        onEachFeature: function onEachFeature(feature, layer) {\n          return _this2.onEachFeature2(feature, layer);\n        }\n      }), this.state.ipopup && __jsx(Popup, {\n        key: this.state.key,\n        position: this.state.iposition,\n        onClose: function onClose() {\n          _this2.setState({\n            ipopup: false\n          });\n        }\n      }, __jsx(\"div\", {\n        style: {\n          width: 320 + 'px',\n          height: 240 + 'px'\n        }\n      }, this.state.iLoading && this.state.cmpload ? __jsx(Barplot, {\n        X: this.state.intX,\n        Y: this.state.intY,\n        title: this.state.ititle\n      }) : __jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\",\n        color: \"teal\"\n      })))))) : __jsx(Spinner, {\n        accessibilityLabel: \"Spinner example\",\n        size: \"large\",\n        color: \"teal\"\n      })));\n    }\n  }]);\n\n  return Maps;\n}(React.Component);\n\nexport default Maps;","map":null,"metadata":{},"sourceType":"module"}