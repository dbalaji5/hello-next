{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { Stack, Button } from '@shopify/polaris';\nimport { ArrowUpMinor, ArrowDownMinor } from '@shopify/polaris-icons';\nimport Severity from './Severity.js';\n\nclass Loader extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"changeSource\", i => {\n      var source = this.state.source;\n      var src = this.state.src;\n\n      if (source[i] === ArrowUpMinor) {\n        source[i] = ArrowDownMinor;\n        src[i] = -1;\n      } else {\n        source[i] = ArrowUpMinor;\n        src[i] = 1;\n      }\n\n      this.setState({\n        source: source,\n        src: src\n      });\n      this.props.onSourceChange(this.state.src);\n    });\n\n    _defineProperty(this, \"onRangeChange\", (value, index) => {\n      var range = this.state.range;\n      range[index] = value;\n      this.setState({\n        range: range\n      });\n      this.props.onRangeChange(this.state.range);\n    });\n\n    this.state = {\n      data: [],\n      source: [],\n      src: [],\n      category: [],\n      range: []\n    };\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    if (this.props.data !== oldState.data && this.props.src !== oldState.source) {\n      this.setState({\n        data: this.props.data,\n        source: this.props.src,\n        category: this.props.cat,\n        src: this.props.source,\n        range: this.props.range\n      });\n    }\n  }\n\n  render() {\n    if (this.state.data.length === 0) {\n      return __jsx(\"h1\", null, \"Waiting for the contents\");\n    }\n\n    return __jsx(\"div\", null, this.state.data.map((item, index) => __jsx(Stack, {\n      distribution: \"equalSpacing\"\n    }, __jsx(\"p\", {\n      key: item\n    }, item), __jsx(Severity, {\n      attr: item,\n      cat: this.state.category[index],\n      setRange: ivalue => this.onRangeChange(ivalue, index),\n      onChange: value => this.onRangeChange(value, index)\n    }), __jsx(Button, {\n      icon: this.state.source[index],\n      onClick: () => this.changeSource(index)\n    }))));\n  }\n\n}\n\nexport default Loader;","map":null,"metadata":{},"sourceType":"module"}