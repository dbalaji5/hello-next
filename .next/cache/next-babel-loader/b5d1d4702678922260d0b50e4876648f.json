{"ast":null,"code":"var _jsxFileName = \"/home/balaji/hello-next/components/BarChart.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nclass BarChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: this.props.data\n    };\n  }\n\n  componentDidMount() {//const data = [ 2, 4, 2, 6, 8 ]\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    if (this.props.data !== oldState.data) {\n      //   console.log(this.props.data);\n      this.setState({\n        data: this.props.data\n      });\n      d3.selectAll(this.refs.canvas).select(\"svg\").remove(); //this.drawBarChart();\n    }\n  } // type(d) {\n  //     d[\"Index\"]=+d[\"Index\"]\n  //     d[\"DAUID\"]=d[\"DAUID\"]\n  //     return d\n  // }\n\n\n  drawBarChart() {\n    // const canvasHeight = 400\n    // const canvasWidth = 600\n    // const scale = 20\n    // const svgCanvas = d3.select(this.refs.canvas)\n    //     .append(\"svg\")\n    //     .attr(\"width\", canvasWidth)\n    //     .attr(\"height\", canvasHeight)\n    //     .style(\"border\", \"1px solid black\")\n    // svgCanvas.selectAll(\"rect\")\n    //     .data(data).enter()\n    //         .append(\"rect\")\n    //         .attr(\"width\", 40)\n    //         .attr(\"height\", (datapoint) => datapoint * scale)\n    //         .attr(\"fill\", \"orange\")\n    //         .attr(\"x\", (datapoint, iteration) => iteration * 45)\n    //         .attr(\"y\", (datapoint) => canvasHeight - datapoint * scale)\n    // svgCanvas.selectAll(\"text\")\n    // .data(data).enter()\n    //     .append(\"text\")\n    //     .attr(\"x\", (dataPoint, i) => i * 45 + 10)\n    //     .attr(\"y\", (dataPoint, i) => canvasHeight - dataPoint * scale - 10)\n    //     .text(dataPoint => dataPoint)\n    //d3.selectAll(this.refs.canvas).select(\"svg\").remove();\n    // var tooltip2 = d3.select(\"body\")\n    // .append(\"div\")\n    // .attr(\"class\", \"tooltip2\")\n    // .html('test')\n    // .style(\"opacity\",1);\n    //sort bars based on value\n    const data = this.state.data.sort(function (a, b) {\n      return d3.ascending(a.Index, b.Index);\n    });\n    this.setState({\n      data: data\n    }); //set up svg using margin conventions - we'll need plenty of room on the left for labels\n\n    var margin = {\n      top: 15,\n      right: 25,\n      bottom: 15,\n      left: 60\n    };\n    var width = 500 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    var svg = d3.select(this.refs.canvas).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    var y = d3.scaleLinear().range([height, 0]).domain([d3.min(this.state.data, function (d) {\n      return +d.Index;\n    }), d3.max(this.state.data, function (d) {\n      return +d.Index;\n    })]);\n    var x = d3.scaleBand().range([0, width]).domain(this.state.data.map(function (d) {\n      return d.DAUID;\n    })); //make y axis to show bar names\n    // var yAxis = d3.svg.axis()\n    //     .scale(y)\n    //     //no tick marks\n    //     .tickSize(0)\n    //     .orient(\"left\");\n    //    // var gy = svg.append(\"g\")\n    //    //     .attr(\"class\", \"y axis\")\n    //    //     .call(yAxis)\n\n    var bars = svg.selectAll(\".bar\").data(this.state.data).enter().append(\"g\"); //append rects\n\n    bars.append(\"rect\").attr(\"class\", \"bar\").style(\"fill\", function (d) {\n      return '#dd1c77';\n    }).attr(\"y\", function (d) {\n      return y(d.Index);\n    }).attr(\"height\", function (d) {\n      return height - y(d.Index);\n    }).attr(\"x\", function (d) {\n      return x(d.DAUID);\n    }).attr(\"width\", x.bandwidth()); //  .on(\"mouseover\", function(d) {\n    //            tooltip2.transition()\n    //                .duration(0)\n    //                .style(\"opacity\", .9);\n    //                tooltip2.html(\"<p>\" + d.DAUID +\"</p>\")\n    //                .style(\"left\", (d3.event.pageX) + \"px\")\n    //                .style(\"top\", (d3.event.pageY - 28) + \"px\").style(\"visibility\", \"visible\");\n    //                geoLayer2.eachLayer(function (layer) {\n    //                  if(layer.feature.properties[\"DAUID\"] == d.DAUID) {\n    //                    layer.setStyle({opacity:1,fillOpacity:0.6,weight:6});\n    //                  }\n    //                });\n    //            })\n    //    .on(\"mouseleave\", function(d) {\n    //        tooltip2.transition()\n    //            .duration(500)\n    //            .style(\"opacity\", 0);\n    //            geoLayer2.eachLayer(function (layer) {\n    //              layer.setStyle({opacity:1,fillOpacity:0.3,weight:1})\n    //            });\n    //    });\n\n    bars.append(\"text\").attr(\"text-anchor\", \"middle\") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr(\"transform\", \"translate(\" + 0 + \",\" + height / 2 + \")rotate(-90)\") // text is drawn off the screen top left, move down and out and rotate\n    .text(\"DAUID\");\n    bars.append(\"text\").attr(\"text-anchor\", \"middle\") // this makes it easy to centre the text as the transform is applied to the anchor\n    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + (height + 14) + \")\") // centre below axis\n    .text(\"Rank\");\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      ref: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default BarChart;","map":{"version":3,"sources":["/home/balaji/hello-next/components/BarChart.js"],"names":["React","Component","d3","BarChart","constructor","props","state","data","componentDidMount","componentDidUpdate","oldProps","oldState","setState","selectAll","refs","canvas","select","remove","drawBarChart","sort","a","b","ascending","Index","margin","top","right","bottom","left","width","height","svg","append","attr","y","scaleLinear","range","domain","min","d","max","x","scaleBand","map","DAUID","bars","enter","style","bandwidth","text","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as d3 from 'd3'\nclass BarChart extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            \n            data:this.props.data\n        }\n    }\n    componentDidMount() {\n        //const data = [ 2, 4, 2, 6, 8 ]\n        \n    }\n    componentDidUpdate(oldProps,oldState){\n    \n        \n        if((this.props.data !== oldState.data)){\n        //   console.log(this.props.data);\n        \n            this.setState({\n                data:this.props.data\n            });\n            d3.selectAll(this.refs.canvas).select(\"svg\").remove();\n            //this.drawBarChart();\n        }\n        \n    }\n    // type(d) {\n    //     d[\"Index\"]=+d[\"Index\"]\n    //     d[\"DAUID\"]=d[\"DAUID\"]\n    //     return d\n    // }\n    drawBarChart()  {\n\n        // const canvasHeight = 400\n        // const canvasWidth = 600\n        // const scale = 20\n        // const svgCanvas = d3.select(this.refs.canvas)\n        //     .append(\"svg\")\n        //     .attr(\"width\", canvasWidth)\n        //     .attr(\"height\", canvasHeight)\n        //     .style(\"border\", \"1px solid black\")\n        // svgCanvas.selectAll(\"rect\")\n        //     .data(data).enter()\n        //         .append(\"rect\")\n        //         .attr(\"width\", 40)\n        //         .attr(\"height\", (datapoint) => datapoint * scale)\n        //         .attr(\"fill\", \"orange\")\n        //         .attr(\"x\", (datapoint, iteration) => iteration * 45)\n        //         .attr(\"y\", (datapoint) => canvasHeight - datapoint * scale)\n        // svgCanvas.selectAll(\"text\")\n        // .data(data).enter()\n        //     .append(\"text\")\n        //     .attr(\"x\", (dataPoint, i) => i * 45 + 10)\n        //     .attr(\"y\", (dataPoint, i) => canvasHeight - dataPoint * scale - 10)\n        //     .text(dataPoint => dataPoint)\n        //d3.selectAll(this.refs.canvas).select(\"svg\").remove();\n\n\n        // var tooltip2 = d3.select(\"body\")\n        // .append(\"div\")\n        // .attr(\"class\", \"tooltip2\")\n        // .html('test')\n        // .style(\"opacity\",1);\n\n         //sort bars based on value\n         const data = this.state.data.sort(function (a, b) {\n             return d3.ascending(a.Index, b.Index);\n         })\n         this.setState({\n             data:data\n         })\n\n         //set up svg using margin conventions - we'll need plenty of room on the left for labels\n         var margin = {\n             top: 15,\n             right: 25,\n             bottom: 15,\n             left: 60\n         };\n\n         var width = 500 - margin.left - margin.right,\n             height = 400 - margin.top - margin.bottom;\n\n         var svg = d3.select(this.refs.canvas).append(\"svg\")\n             .attr(\"width\", width + margin.left + margin.right)\n             .attr(\"height\", height + margin.top + margin.bottom)\n             .append(\"g\")\n             .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n         var y = d3.scaleLinear()\n             .range([height, 0])\n             .domain([d3.min(this.state.data, function (d) {\n                 return +d.Index;\n             }), d3.max(this.state.data, function (d) {\n                 return +d.Index;\n             })]);\n\n         var x = d3.scaleBand()\n             .range([0, width])\n             .domain(this.state.data.map(function (d) {\n                 return d.DAUID;\n             }));\n\n         //make y axis to show bar names\n         // var yAxis = d3.svg.axis()\n         //     .scale(y)\n         //     //no tick marks\n         //     .tickSize(0)\n         //     .orient(\"left\");\n\n      //    // var gy = svg.append(\"g\")\n      //    //     .attr(\"class\", \"y axis\")\n      //    //     .call(yAxis)\n\n         var bars = svg.selectAll(\".bar\")\n             .data(this.state.data)\n             .enter()\n             .append(\"g\")\n\n         //append rects\n         bars.append(\"rect\")\n             .attr(\"class\", \"bar\")\n             .style(\"fill\",function(d){return '#dd1c77';})\n             .attr(\"y\", function (d) {\n                 return y(d.Index);\n             })\n             .attr(\"height\", function(d) { return height - y(d.Index);} )\n             .attr(\"x\", function(d){return x(d.DAUID)})\n             .attr(\"width\", x.bandwidth())\n            //  .on(\"mouseover\", function(d) {\n            //            tooltip2.transition()\n            //                .duration(0)\n            //                .style(\"opacity\", .9);\n            //                tooltip2.html(\"<p>\" + d.DAUID +\"</p>\")\n            //                .style(\"left\", (d3.event.pageX) + \"px\")\n            //                .style(\"top\", (d3.event.pageY - 28) + \"px\").style(\"visibility\", \"visible\");\n\n            //                geoLayer2.eachLayer(function (layer) {\n            //                  if(layer.feature.properties[\"DAUID\"] == d.DAUID) {\n            //                    layer.setStyle({opacity:1,fillOpacity:0.6,weight:6});\n\n            //                  }\n            //                });\n\n            //            })\n            //    .on(\"mouseleave\", function(d) {\n            //        tooltip2.transition()\n            //            .duration(500)\n            //            .style(\"opacity\", 0);\n\n            //            geoLayer2.eachLayer(function (layer) {\n\n            //              layer.setStyle({opacity:1,fillOpacity:0.3,weight:1})\n\n\n            //            });\n            //    });\n\n\n             bars.append(\"text\")\n            .attr(\"text-anchor\", \"middle\")  // this makes it easy to centre the text as the transform is applied to the anchor\n            .attr(\"transform\", \"translate(\"+ (0) +\",\"+(height/2)+\")rotate(-90)\")  // text is drawn off the screen top left, move down and out and rotate\n            .text(\"DAUID\");\n\n\n            bars.append(\"text\")\n            .attr(\"text-anchor\", \"middle\")  // this makes it easy to centre the text as the transform is applied to the anchor\n            .attr(\"transform\", \"translate(\"+ (width/2) +\",\"+(height+14)+\")\")  // centre below axis\n            .text(\"Rank\");\n\n    }\n    render() {\n    \n        \n        \n        \n        \n        return (<div ref=\"canvas\"></div>); }\n}\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}