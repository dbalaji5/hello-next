{"ast":null,"code":"var _jsxFileName = \"/home/balaji/hello-next/components/MapsComp.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react'; //import { Map, TileLayer,LayersControl,GeoJSON } from \"react-leaflet-universal\";\n\nimport { Spinner } from '@shopify/polaris';\nimport \"leaflet/dist/leaflet.css\";\nimport diss from '../data/Dissemination.json';\nimport '@shopify/polaris/styles.css';\nlet RL = false;\nlet Map = false;\nlet TileLayer = false;\nlet LayersControl = false;\nlet GeoJSON = false;\n\nif (process.env.BROWSER) {\n  RL = require('react-leaflet');\n  Map = RL.Map;\n  TileLayer = RL.TileLayer;\n  LayersControl = RL.LayersControl;\n  GeoJSON = RL.GeoJSON;\n} // L.Icon.Default.imagePath = '.';\n// // OR\n// delete L.Icon.Default.prototype._getIconUrl;\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//   iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//   shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n\n\nclass MapsComp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getColor\", val => {\n      return val >= -1 && val < -0.75 ? '#a50026' : val >= -0.75 && val < -0.6 ? '#d73027' : val >= -0.6 && val < -0.4 ? '#f46d43' : val >= -0.4 && val < -0.2 ? '#fdae61' : val >= -0.2 && val < 0 ? '#fee08b' : val >= 0.01 && val < 0.1 ? '#d9ef8b' : val >= 0.1 && val < 0.3 ? '#a6d96a' : val >= 0.3 && val < 0.5 ? '#66bd63' : val >= 0.5 && val < 0.75 ? '#1a9850' : val >= 0.75 && val <= 1 ? '#006837' : val >= 0 && val < 0.01 ? '#ffffff' : '#000000';\n    });\n\n    this.state = {\n      data: [],\n      loading: false\n    };\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    if (this.props.data !== oldState.data || this.props.loading !== oldState.loading) {\n      console.log(this.props.data);\n      this.setState({\n        data: this.props.data,\n        loading: this.props.loading\n      });\n    }\n  }\n\n  render() {\n    var style = feature => {\n      var checkDauId = feature.properties.DAUID;\n\n      if (Object.keys(this.state.data).length > 0) {\n        return {\n          fillColor: this.getColor(this.state.data[checkDauId]),\n          color: this.getColor(this.state.data[checkDauId]),\n          opacity: 1,\n          fillOpacity: 0.3,\n          weight: 0.5\n        };\n      }\n    };\n\n    return __jsx(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, this.state.loading === false ? __jsx(Map, {\n      center: [44.755113, -63.320488],\n      zoom: 9,\n      style: {\n        height: \"90vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, __jsx(TileLayer, {\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), __jsx(LayersControl, {\n      position: \"topright\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, __jsx(LayersControl.BaseLayer, {\n      name: \"Indcmp\",\n      checked: \"true\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, __jsx(GeoJSON // key={this.state.gkey}\n    , {\n      ref: \"geojson\",\n      data: diss,\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })))) : __jsx(Spinner, {\n      accessibilityLabel: \"Spinner example\",\n      size: \"large\",\n      color: \"teal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MapsComp;","map":{"version":3,"sources":["/home/balaji/hello-next/components/MapsComp.js"],"names":["React","Spinner","diss","RL","Map","TileLayer","LayersControl","GeoJSON","process","env","BROWSER","require","MapsComp","Component","constructor","props","val","state","data","loading","componentDidUpdate","oldProps","oldState","console","log","setState","render","style","feature","checkDauId","properties","DAUID","Object","keys","length","fillColor","getColor","color","opacity","fillOpacity","weight","height"],"mappings":"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","sourcesContent":["import React from 'react';\n//import { Map, TileLayer,LayersControl,GeoJSON } from \"react-leaflet-universal\";\nimport {Spinner} from '@shopify/polaris';\nimport \"leaflet/dist/leaflet.css\";\nimport diss from '../data/Dissemination.json';\nimport '@shopify/polaris/styles.css';\n\n\nlet RL = false;\nlet Map = false;\nlet TileLayer = false;\nlet LayersControl=false;\nlet GeoJSON=false;\nif (process.env.BROWSER) {\n  RL = require('react-leaflet');\n  Map = RL.Map;\n  TileLayer = RL.TileLayer;\n  LayersControl=RL.LayersControl;\n  GeoJSON=RL.GeoJSON;\n}\n\n// L.Icon.Default.imagePath = '.';\n// // OR\n// delete L.Icon.Default.prototype._getIconUrl;\n\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//   iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//   shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n\nclass MapsComp extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            data:[],\n            loading:false\n        }\n    }\n    componentDidUpdate(oldProps,oldState){\n    \n        \n        if(this.props.data !== oldState.data || this.props.loading !== oldState.loading){\n          console.log(this.props.data);\n        \n            this.setState({\n                data:this.props.data,\n                loading:this.props.loading\n            });\n          \n        }\n       \n    }\n    getColor = (val) => {\n\n\n        return val>=-1 && val < -0.75? '#a50026':\n                val>=-0.75 && val < -0.6 ? '#d73027':\n                val>=-0.6 && val < -0.4 ? '#f46d43':\n                val>=-0.4 && val < -0.2 ? '#fdae61':\n                val>=-0.2 && val < 0 ? '#fee08b':\n                val>=0.01   &&  val <0.1 ? '#d9ef8b':\n                val>=0.1 && val < 0.3 ? '#a6d96a':\n                val>=0.3 && val < 0.5 ? '#66bd63':\n                val>=0.5 && val < 0.75 ? '#1a9850':\n                val >= 0.75 && val <= 1 ? '#006837':\n                val>=0 && val <0.01 ? '#ffffff':\n                                    '#000000';\n  \n      };\n\n      \n\n    render(){\n\n        var style = (feature) => {\n            var checkDauId=feature.properties.DAUID;\n            if(Object.keys(this.state.data).length>0){\n                return ({\n                    fillColor: this.getColor(this.state.data[checkDauId]),\n                    color:this.getColor(this.state.data[checkDauId]),\n                    opacity:1,\n                    fillOpacity:0.3,\n                    weight:0.5\n                });\n            }\n        }\n\n        return (\n          <React.Fragment>\n          {(this.state.loading===false)?(\n          <Map center={[44.755113, -63.320488]} zoom={9} style={{ height: \"90vh\" }}>\n            <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n         \n          <LayersControl position=\"topright\">\n          \n          <LayersControl.BaseLayer name=\"Indcmp\" checked=\"true\">\n          <GeoJSON \n                // key={this.state.gkey}\n                ref=\"geojson\"\n                data={diss}\n                style={style}\n              />\n          </LayersControl.BaseLayer>\n            \n          </LayersControl>\n          </Map>\n          ):(<Spinner accessibilityLabel=\"Spinner example\" size=\"large\" color=\"teal\" />)}\n          </React.Fragment>\n        );\n    }\n\n}\n\nexport default MapsComp;"]},"metadata":{},"sourceType":"module"}