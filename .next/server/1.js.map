{"version":3,"file":"1.js","sources":["webpack:///./components/MapsComp.js"],"sourcesContent":["import React from 'react';\nimport { Map, TileLayer,LayersControl,GeoJSON } from \"react-leaflet\";\nimport {Spinner} from '@shopify/polaris';\nimport \"leaflet/dist/leaflet.css\";\nimport diss from '../data/Dissemination.json';\nimport '@shopify/polaris/styles.css';\n\n\n\n\n// L.Icon.Default.imagePath = '.';\n// // OR\n// delete L.Icon.Default.prototype._getIconUrl;\n\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//   iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//   shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n\nclass MapsComp extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            data:[],\n            loading:false,\n            inBrowser:false\n        }\n    }\n\n    componentDidMount(){\n        this.setState({inBrowser:true});\n    }\n\n    componentDidUpdate(oldProps,oldState){\n    \n        \n        if(this.props.data !== oldState.data || this.props.loading !== oldState.loading){\n          console.log(this.props.data);\n        \n            this.setState({\n                data:this.props.data,\n                loading:this.props.loading\n            });\n          \n        }\n       \n    }\n    getColor = (val) => {\n\n\n        return val>=-1 && val < -0.75? '#a50026':\n                val>=-0.75 && val < -0.6 ? '#d73027':\n                val>=-0.6 && val < -0.4 ? '#f46d43':\n                val>=-0.4 && val < -0.2 ? '#fdae61':\n                val>=-0.2 && val < 0 ? '#fee08b':\n                val>=0.01   &&  val <0.1 ? '#d9ef8b':\n                val>=0.1 && val < 0.3 ? '#a6d96a':\n                val>=0.3 && val < 0.5 ? '#66bd63':\n                val>=0.5 && val < 0.75 ? '#1a9850':\n                val >= 0.75 && val <= 1 ? '#006837':\n                val>=0 && val <0.01 ? '#ffffff':\n                                    '#000000';\n  \n      };\n\n      \n\n    render(){\n\n        if(!this.state.inBrowser){\n            return null;\n        }\n\n        var style = (feature) => {\n            var checkDauId=feature.properties.DAUID;\n            if(Object.keys(this.state.data).length>0){\n                return ({\n                    fillColor: this.getColor(this.state.data[checkDauId]),\n                    color:this.getColor(this.state.data[checkDauId]),\n                    opacity:1,\n                    fillOpacity:0.3,\n                    weight:0.5\n                });\n            }\n        }\n      \n        return (\n        \n          <React.Fragment>\n          {(this.state.loading===false)?(\n          <Map center={[44.755113, -63.320488]} zoom={9} style={{ height: \"90vh\" }}>\n            <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n            />\n         \n          <LayersControl position=\"topright\">\n          \n          <LayersControl.BaseLayer name=\"Indcmp\" checked=\"true\">\n          <GeoJSON \n                // key={this.state.gkey}\n                ref=\"geojson\"\n                data={diss}\n                style={style}\n              />\n          </LayersControl.BaseLayer>\n            \n          </LayersControl>\n          </Map>\n          ):(<Spinner accessibilityLabel=\"Spinner example\" size=\"large\" color=\"teal\" />)}\n          </React.Fragment>\n        );\n    }\n\n}\n\nexport default MapsComp;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AA8BA;AAaA;AACA;AA1CA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AAEA;AACA;AAoBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AA/FA;AACA;AAiGA;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}