{"version":3,"file":"0.js","sources":["webpack:///./components/Maps.js"],"sourcesContent":["import React from 'react';\nimport { Map, TileLayer,Popup,LayersControl,GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport diss from '../data/Dissemination.json';\nimport '@shopify/polaris/styles.css';\nimport {Card,Layout,Spinner} from '@shopify/polaris';\nimport axios from 'axios';\nimport dynamic from 'next/dynamic'\nconst Barplot = dynamic(import('./BarPlot'),{\n  ssr:false\n})\n\n\n\n// L.Icon.Default.imagePath = '.';\n// // OR\n// delete L.Icon.Default.prototype._getIconUrl;\n\n// L.Icon.Default.mergeOptions({\n//   iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n//   iconUrl: require('leaflet/dist/images/marker-icon.png'),\n//   shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\n// });\n\n\nlet numMapClicks = 0\nlet geoMapClicks=0\nlet geoMapClicks2=0\n\n  class Maps extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          inBrowser:false,\n          weight: 0.5,\n          opacity: 1,\n          color: '#ffcc99',\n          color2: '#ff66b2',\n          gpopup: false,\n          ipopup:false,\n          position:[],\n          iposition:[],\n          gtitle:'',\n          ititle:'',\n          key:numMapClicks++,\n          gkey:geoMapClicks++,\n          ikey:geoMapClicks2,\n          gLoading:false,\n          iLoading:false,\n          genres:{},\n          intres:{},\n          gendata:[],\n          intdata:[],\n          genX:[],\n          genY:[],\n          intX:[],\n          intY:[],\n          ajaxload:false,\n          cmpload:false,\n          iweight:{}\n        };\n      }\n      componentDidMount(){\n         this.setState({inBrowser:true});\n      }\n      componentDidUpdate(oldProps,oldState){\n    \n        \n        if((this.props.genres !== oldState.genres && this.props.gendata!==oldState.gendata) || (this.props.intres !== oldState.intres && this.props.intdata!==oldState.intdata)  || (this.props.ajaxload!== oldState.ajaxload) || (this.props.iweight!== oldState.iweight)){\n         \n        \n            this.setState({\n                genres:this.props.genres,\n                gendata:this.props.gendata,\n                gkey:geoMapClicks,\n                ikey:geoMapClicks2,\n                intres:this.props.intres,\n                intdata:this.props.intdata,\n                weight:1,\n                ajaxload:this.props.ajaxload,\n                iweight:this.props.iweight\n            });\n          \n        }\n        // if(this.props.intres !== oldState.intres && this.props.intdata!==oldState.intdata){\n        //    console.log(this.props.intres);\n        //    this.setState({\n        //      intres:this.props.intres,\n        //      intdata:this.props.intdata\n        //    })\n        // }\n    }\n\n     getColor = (val) => {\n\n\n      return val>=-1 && val < -0.75? '#a50026':\n             val>=-0.75 && val < -0.6 ? '#d73027':\n             val>=-0.6 && val < -0.4 ? '#f46d43':\n             val>=-0.4 && val < -0.2 ? '#fdae61':\n             val>=-0.2 && val < 0 ? '#fee08b':\n             val>=0.01   &&  val <0.1 ? '#d9ef8b':\n             val>=0.1 && val < 0.3 ? '#a6d96a':\n             val>=0.3 && val < 0.5 ? '#66bd63':\n             val>=0.5 && val < 0.75 ? '#1a9850':\n             val >= 0.75 && val <= 1 ? '#006837':\n             val>=0 && val <0.01 ? '#ffffff':\n                                   '#000000';\n\n    };\n\n    onEachFeature2 = (feature,layer) => {\n      //layer.setStyle({fillColor : this.state.color2 ,color:this.state.color2,opacity:this.state.opacity,fillOpacity:0.4,weight:0.4})\n      if(this.state.intdata.length===0){\n        this.setState({\n            iLoading:false\n        })\n        }\n        else{\n            this.setState({\n                iLoading:true\n            })\n        }\n      layer.on('click',(e)=>{\n       \n        if(this.state.iLoading){\n        var data={}\n        data['DAUID']=feature.properties.DAUID;\n        this.setState({\n           cmpload:true\n        })\n        axios.get('http://localhost:5000/rest/explainer/',{params:data})\n        .then(result => {\n\n          \n          var rX=[]\n          var rY=[]\n          var rdata=result.data['exp'];\n          for(var i=0;i<rdata.length;i++){\n              rY.push(rdata[i][1])\n              rX.push(rdata[i][0])\n          }\n     \n          this.setState(\n\n            {\n               intX:rX,\n               //support@refer.telus.com dexter hugo \n               intY:rY,\n               cmpload:true\n            }\n          )\n        });\n      }\n        this.setState({\n           ipopup:true,\n           iposition:e.latlng,\n           key:numMapClicks++,\n           ititle:feature.properties.DAUID\n        });\n    });\n  }\n   \n\n     onEachFeature = (feature,layer) => {\n\n\n      var checkDauId=feature.properties.DAUID;\n      layer.on('click',(e)=>{\n          \n          this.setState({\n             gpopup:true,\n             position:e.latlng,\n             key:numMapClicks++,\n             \n          });\n          if(this.state.gendata.length===0){\n              this.setState({\n                  gLoading:false\n              })\n          }\n          else{\n              this.setState({\n                  gLoading:true\n              })\n          }\n          if(this.state.gLoading){\n            for(var i=0;i<this.state.gendata.length;i++){\n\n                if(this.state.gendata[i].DAUID===checkDauId){\n                    const title='Index:'+this.state.gendata[i].Index;\n                    this.setState(\n\n                      {\n                         genX:this.state.gendata[i].X,\n                         genY:this.state.gendata[i].Y,\n                         gtitle:title\n                      }\n                    )\n                    \n                    break;\n                }\n            }\n          }\n      });\n    if(this.state.gendata.length===0){\n      this.setState({\n          gLoading:false\n      })\n  }\n  else{\n      this.setState({\n          gLoading:true\n      })\n  }\n  // if(this.state.gLoading){\n  //     layer.setStyle({fillColor : this.getColor(this.state.genres[checkDauId]) ,color:this.getColor(this.state.genres[checkDauId]),opacity:1,fillOpacity:0.3,weight:1})\n  // }\n  }\n    render(){\n\n       if(!this.state.inBrowser){\n          return null;\n       }\n\n        \n\n        var style = (feature) => {\n            var checkDauId=feature.properties.DAUID;\n            if(this.state.gendata.length>0){\n                return ({\n                    fillColor: this.getColor(this.state.genres[checkDauId]),\n                    color:this.getColor(this.state.genres[checkDauId]),\n                    opacity:1,\n                    fillOpacity:0.3,\n                    weight:this.state.iweight[checkDauId]\n                });\n            }\n          //   else{\n          //   return ({\n                \n          //       weight: this.state.weight,\n          //       opacity: this.state.opacity\n          //     }\n          //   );\n          // }\n    \n        }\n       \n      var style2 = (feature) => {\n        var checkDauId=feature.properties.DAUID;\n        if(this.state.intdata.length>0){\n            return ({\n                fillColor: this.getColor(this.state.intres[checkDauId]),\n                color:this.getColor(this.state.intres[checkDauId]),\n                opacity:1,\n                fillOpacity:0.3,\n                weight:this.state.iweight[checkDauId]\n            });\n        }\n  \n      }\n      // const onEachFeature2 = (feature,layer) => {\n\n      //     console.log(feature.properties[\"DAUID\"]);\n      //     layer.setStyle({fillColor : this.state.color2 ,color:this.state.color2,opacity:this.state.opacity,fillOpacity:0.4,weight:0.4})\n      //     layer.on('click',(e)=>{\n            \n      //       this.setState({\n      //          ipopup:true,\n      //          iposition:e.latlng,\n      //          key:numMapClicks++,\n      //          ititle:feature.properties.DAUID\n      //       });\n      //   })\n      // }\n        return (\n          \n          <Layout.Section oneHalf>\n          <Card title=\"Visualization\">\n          {(this.state.ajaxload==false)?(\n            <Map center={[44.755113, -63.320488]} zoom={9} style={{ height: \"60vh\" }} >\n            \n                <TileLayer\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n              />\n             \n              <LayersControl position=\"topright\">\n              \n              <LayersControl.BaseLayer name=\"Index\" checked=\"true\">\n              <GeoJSON \n                // key={this.state.gkey}\n                ref=\"geojson2\"\n                data={diss}\n                style={style}\n                onEachFeature={(feature,layer)=>this.onEachFeature(feature,layer)}\n              />\n            \n               {this.state.gpopup && <Popup key={this.state.key} position={this.state.position} onClose={()=>{this.setState({popup:false})}}>\n               <div style={{width:320+'px',height:240+'px'}}>\n               {(this.state.gLoading)?(<Barplot X={this.state.genX} Y={this.state.Y} title={this.state.title}/>):(<Spinner accessibilityLabel=\"Spinner example\" size=\"large\" color=\"teal\" />)}\n                  </div>\n                </Popup>\n                \n                }\n            \n              </LayersControl.BaseLayer>\n              <LayersControl.BaseLayer name=\"Interpret\">\n              <GeoJSON \n                key={this.state.ikey}\n                ref=\"geojson\"\n                data={diss}\n                style={style2}\n                onEachFeature={(feature,layer)=>this.onEachFeature2(feature,layer)}\n              />\n              {this.state.ipopup && <Popup key={this.state.key} position={this.state.iposition} onClose={()=>{this.setState({ipopup:false})}}>\n              <div style={{width:320+'px',height:240+'px'}}>\n              {(this.state.iLoading && this.state.cmpload)?(<Barplot X={this.state.intX} Y={this.state.intY} title={this.state.ititle}/>):(<Spinner accessibilityLabel=\"Spinner example\" size=\"large\" color=\"teal\" />)}\n                  </div>\n                </Popup>}\n            \n              </LayersControl.BaseLayer>\n              </LayersControl>\n              \n\n            </Map>):\n           <Spinner accessibilityLabel=\"Spinner example\" size=\"large\" color=\"teal\" />}\n\n      </Card>\n      {/* <Card title=\"demo\">\n        <div id=\"te\">\n\n                 {(this.state.gLoading)?(<BarChart data={this.state.gendata}/>):<p>Waiting for Contents</p>}\n        </div>\n      </Card> */}\n    </Layout.Section>\n  );\n    \n  };\n}\n\nexport default Maps;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAkEA;AAaA;AACA;AAhFA;AAkFA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AApIA;AAyxTA;AACA;AAyTA;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}